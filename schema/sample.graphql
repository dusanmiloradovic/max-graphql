# Comments in GraphQL are defined with the hash (#) symbol.

# This "Book" type can be used in other type declarations.
type Book {
  title: String
  author: String
}

# The "Query" type is the root of all GraphQL queries.
# (A "Mutation" type will be covered later on.)
type Query {
  books: [Book]
  book(author:String): Book
  po(fromRow:Int, numRows:Int,_handle:String,qbe:POSTDQBE):[POSTD]
  #  po(fromRow:Int, numRows:Int,_handle:String,qbe:POQBE):[PO]
}

#obrisi ovo kada ide u prod, iz gaska
type POSTD{
  id:ID
  ponum:String
  description:String
  status:String
  _handle:String
  books:[Book]
  polinestd(fromRow:Int,numRows:Int, _handle:String, qbe:POLINESTDQBE):[POLINESTD]
  list_status(fromRow:Int,numRows:Int, _handle:String, qbe:ALNDOMAINQBE):[ALNDOMAIN] 
}

input POSTDQBE{
  id:ID
  ponum:String
  description:String
  status:String
}

type PO{
  id:ID
  ponum:String
  description:String
  status:String
  poline(fromRow:Int,numRows:Int, _handle:String, qbe:POLINEQBE):[POLINE]
  list_status(fromRow:Int,numRows:Int, _handle:String, qbe:ALNDOMAINQBE):[ALNDOMAIN] 
  _handle:String
}

#For the qbe types all paramenters will be string except the id
#If id is set wverything else is ignored
input POQBE{
  id:ID
  ponum:String
  description:String
  status:String
}

type POLINE{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  _handle:String
  
}

type POLINESTD{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  _handle:String
  
}

input POLINEQBE{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  
}

input POLINESTDQBE{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  
}

type ALNDOMAIN{
  id:ID
  value:String
  description:String
}

input ALNDOMAINQBE{
  id:ID
  value:String
  description:String
}

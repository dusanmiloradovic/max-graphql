# Comments in GraphQL are defined with the hash (#) symbol.

# This "Book" type can be used in other type declarations.
#type Book {
#  title: String
#  author: String
#}

# The "Query" type is the root of all GraphQL queries.
# (A "Mutation" type will be covered later on.)
type Query {
  #  books: [Book]
  # book(author:String): Book
  po(fromRow:Int, numRows:Int,_handle:String,qbe:POSTDQBE):[POSTD]
  #po(fromRow:Int, numRows:Int,_handle:String,qbe:POQBE):[PO]
}

#obrisi ovo kada ide u prod, iz gaska
type POSTD{
  id:ID
  ponum:String
  description:String
  orderdate:String #TODO this should be GraphQL date (external package)
  status:String
  _handle:String
  polinestd(fromRow:Int,numRows:Int, _handle:String, qbe:POLINESTDQBE):[POLINESTD]
  list_status(fromRow:Int,numRows:Int, _handle:String, qbe:ALNDOMAINQBE):[ALNDOMAIN] 
}

input POSTDQBE{
  id:ID
  ponum:String
  description:String
  status:String
}

type ColumnMetadata{
  attributeName:String
  remarks:String
  title:String
  persistent:Boolean
  isALNDomain:Boolean
  domainId:String
  hasLD:Boolean
  maxType:String
  length:Int
  scale:Int
}

type POMetadata{
  ponum:ColumnMetadata
  description:ColumnMetadata
  status:ColumnMetadata
  orderdate:ColumnMetadata
}

type PO{
  id:ID
  ponum:String
  description:String
  status:String
  orderdate:String #TODO this should be GraphQL date (external package)
  poline(fromRow:Int,numRows:Int, _handle:String, qbe:POLINEQBE):[POLINE]
  list_status(fromRow:Int,numRows:Int, _handle:String, qbe:ALNDOMAINQBE):[ALNDOMAIN] 
  _handle:String
  _metadata:POMetadata
}

#For the qbe types all paramenters will be string except the id
#If id is set wverything else is ignored
input POQBE{
  id:ID
  ponum:String
  description:String
  status:String
}

input POInput{
  ponum:String
  description:String
  status:String
  orderdate:String #TODO this should be GraphQL date (external package)
  _handle:String
}

type POLINE{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  _handle:String
}

input POLINEInput{
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  _handle:String
}

type POLINEMetadata{
  ponum:ColumnMetadata
  description:ColumnMetadata
  polinenum:ColumnMetadata
  orderqty:ColumnMetadata
  orderunit:ColumnMetadata
  unitcost:ColumnMetadata
  linecost:ColumnMetadata
}

type POLINESTD{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  _handle:String
  
}

input POLINEQBE{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  
}

input POLINESTDQBE{
  id:ID
  ponum:String
  description:String
  polinenum:Int
  orderqty:Float
  orderunit:String
  unitcost:Float
  linecost:Float
  
}

type ALNDOMAIN{
  id:ID
  value:String
  description:String
}

input ALNDOMAINQBE{
  id:ID
  value:String
  description:String
}


type Mutation{
  addPO(_handle:String,po:POInput):PO
  updatePO(_handle:String,po:POInput):PO
  deletePO(_handle:String,id;ID):Boolean
  addPOLINE(_handle:String,poline:POLINEInput):POLINE
  updatePOLINE(_handle:String,po:POLINEInput):POLINE
  deletePOLINE(_handle:String,id;ID):Boolean
  save():Boolean
  rollback():Boolean
}
